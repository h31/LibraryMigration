digraph G {
    bgcolor="transparent";
    subgraph cluster0 {
    label = <<B>URL: String</B>>;
        Constructed_URL [ label="Constructed" ];
        encodedURL_URL [ label="encodedURL" ];
    }
    subgraph cluster1 {
    label = <<B>Request: URL</B>>;
        Constructed_Request [ label="Constructed" ];
        hasURL_Request [ label="hasURL" ];
        Init_Request [ label="Init" ];
        virtual0 [ shape = point ];
    }
    subgraph cluster2 {
    label = <<B>Connection: URLConnection</B>>;
        Constructed_Connection [ label="Constructed" ];
        virtual1 [ shape = point ];
        virtual2 [ shape = point ];
        virtual3 [ shape = point ];
        virtual4 [ shape = point ];
        virtual5 [ shape = point ];
    }
    subgraph cluster3 {
    label = <<B>Body: String</B>>;
        Constructed_Body [ label="Constructed" ];
    }
    subgraph cluster4 {
    label = <<B>InputStream: InputStream</B>>;
        Constructed_InputStream [ label="Constructed" ];
    }
    subgraph cluster5 {
    label = <<B>ContentLength: long</B>>;
        Constructed_ContentLength [ label="Constructed" ];
    }
    subgraph cluster6 {
    label = <<B>StatusCode: int</B>>;
        Constructed_StatusCode [ label="Constructed" ];
    }
    subgraph cluster7 {
    label = <<B>HttpConnection: HttpURLConnection</B>>;
        Constructed_HttpConnection [ label="Constructed" ];
        virtual6 [ shape = point ];
    }
    subgraph cluster8 {
    label = <<B>OutputStream: OutputStream</B>>;
        Constructed_OutputStream [ label="Constructed" ];
    }
    subgraph cluster9 {
    label = <<B>Payload: String</B>>;
        Constructed_Payload [ label="Constructed" ];
    }
        Constructed_URL -> encodedURL_URL [ label="", style = "solid"  ];
        encodedURL_URL -> hasURL_Request [ label="Usage in new Request: URL(URL: String)", style = "dashed"  ];
        Init_Request -> hasURL_Request [ label="new Request: URL(URL: String)", style = "bold"  ];
        hasURL_Request -> virtual0 [ style = "bold" label="openConnection()"  ];
        virtual0 -> hasURL_Request [ style = "bold"  ];
        virtual0 -> Constructed_Connection [ label="return URLConnection()"  ];
        Constructed_Connection -> virtual1 [ style = "bold" label="Template"  ];
        virtual1 -> Constructed_Connection [ style = "bold"  ];
        virtual1 -> Constructed_Body [ label="return String()"  ];
        Constructed_Connection -> virtual2 [ style = "bold" label="getInputStream()"  ];
        virtual2 -> Constructed_Connection [ style = "bold"  ];
        virtual2 -> Constructed_InputStream [ label="return InputStream()"  ];
        hasURL_Request -> hasURL_Request [ label="setRequestProperty(ActionParam(propertyName&#x3D;headerName), ActionParam(propertyName&#x3D;headerValue))", style = "bold"  ];
        Constructed_Connection -> Constructed_Connection [ label="setDoOutput()", style = "bold"  ];
        Constructed_Connection -> virtual3 [ style = "bold" label="getContentLengthLong()"  ];
        virtual3 -> Constructed_Connection [ style = "bold"  ];
        virtual3 -> Constructed_ContentLength [ label="return long()"  ];
        Constructed_Connection -> virtual4 [ style = "bold" label="getOutputStream()"  ];
        virtual4 -> Constructed_Connection [ style = "bold"  ];
        virtual4 -> Constructed_OutputStream [ label="return OutputStream()"  ];
        Constructed_Connection -> virtual5 [ style = "bold" label="Template"  ];
        virtual5 -> Constructed_Connection [ style = "bold"  ];
        virtual5 -> Constructed_HttpConnection [ label="return HttpURLConnection()"  ];
        Constructed_HttpConnection -> Constructed_Connection [ label="", style = "solid"  ];
        Constructed_HttpConnection -> virtual6 [ style = "bold" label="getResponseCode()"  ];
        virtual6 -> Constructed_HttpConnection [ style = "bold"  ];
        virtual6 -> Constructed_StatusCode [ label="return int()"  ];
        Constructed_HttpConnection -> Constructed_HttpConnection [ label="setRequestProperty()", style = "bold"  ];
        Constructed_HttpConnection -> Constructed_HttpConnection [ label="setDoOutput()", style = "bold"  ];
        Constructed_OutputStream -> Constructed_OutputStream [ label="close()", style = "bold"  ];
        Constructed_OutputStream -> Constructed_OutputStream [ label="flush()", style = "bold"  ];
        Constructed_OutputStream -> Constructed_OutputStream [ label="write(Payload: String)", style = "bold"  ];
        Constructed_Payload -> Constructed_OutputStream [ label="Usage in write(Payload: String)", style = "dashed"  ];
}